// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_response_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure used to represent a web response. The functions of this structure
	/// may be called on any thread.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefResponse : CefBaseRefCounted<cef_response_t>
	{
		internal static unsafe CefResponse Create(IntPtr instance)
		{
			return new CefResponse((cef_response_t*)instance);
		}

		public CefResponse(cef_response_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Gets a value indicating whether this object is read-only.
		/// </summary>
		public unsafe virtual bool IsReadOnly
		{
			get
			{
				return NativeInstance->IsReadOnly() != 0;
			}
		}

		/// <summary>
		/// Gets and sets the response error code. Returns ERR_NONE if there was no error.
		/// </summary>
		public unsafe virtual CefErrorCode Error
		{
			get
			{
				return NativeInstance->GetError();
			}
			set
			{
				NativeInstance->SetError(value);
			}
		}

		/// <summary>
		/// Gets and sets the response status code.
		/// </summary>
		public unsafe virtual int Status
		{
			get
			{
				return NativeInstance->GetStatus();
			}
			set
			{
				NativeInstance->SetStatus(value);
			}
		}

		/// <summary>
		/// Gets and sets the response status text.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string StatusText
		{
			get
			{
				return CefString.ReadAndFree(NativeInstance->GetStatusText());
			}
			set
			{
				fixed (char* s0 = value)
				{
					var cstr0 = new cef_string_t { Str = s0, Length = value != null ? value.Length : 0 };
					NativeInstance->SetStatusText(&cstr0);
				}
			}
		}

		/// <summary>
		/// Gets and sets the response mime type.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string MimeType
		{
			get
			{
				return CefString.ReadAndFree(NativeInstance->GetMimeType());
			}
			set
			{
				fixed (char* s0 = value)
				{
					var cstr0 = new cef_string_t { Str = s0, Length = value != null ? value.Length : 0 };
					NativeInstance->SetMimeType(&cstr0);
				}
			}
		}

		/// <summary>
		/// Gets and sets the response charset.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string Charset
		{
			get
			{
				return CefString.ReadAndFree(NativeInstance->GetCharset());
			}
			set
			{
				fixed (char* s0 = value)
				{
					var cstr0 = new cef_string_t { Str = s0, Length = value != null ? value.Length : 0 };
					NativeInstance->SetCharset(&cstr0);
				}
			}
		}

		/// <summary>
		/// Gets and sets the resolved URL after redirects or changed as a result of HSTS.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string Url
		{
			get
			{
				return CefString.ReadAndFree(NativeInstance->GetUrl());
			}
			set
			{
				fixed (char* s0 = value)
				{
					var cstr0 = new cef_string_t { Str = s0, Length = value != null ? value.Length : 0 };
					NativeInstance->SetUrl(&cstr0);
				}
			}
		}

		/// <summary>
		/// Get the value for the specified response header field.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string GetHeader(string name)
		{
			fixed (char* s0 = name)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = name != null ? name.Length : 0 };
				return CefString.ReadAndFree(NativeInstance->GetHeader(&cstr0));
			}
		}

		/// <summary>
		/// Get all response header fields.
		/// </summary>
		public unsafe virtual void GetHeaderMap(CefStringMultimap headerMap)
		{
			NativeInstance->GetHeaderMap(headerMap);
		}

		/// <summary>
		/// Set all response header fields.
		/// </summary>
		public unsafe virtual void SetHeaderMap(CefStringMultimap headerMap)
		{
			NativeInstance->SetHeaderMap(headerMap);
		}
	}
}
