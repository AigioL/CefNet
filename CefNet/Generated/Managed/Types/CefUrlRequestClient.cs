// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_urlrequest_client_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure that should be implemented by the cef_urlrequest_t client. The
	/// functions of this structure will be called on the same thread that created
	/// the request unless otherwise documented.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefUrlRequestClient : CefBaseRefCounted<cef_urlrequest_client_t>
	{
		internal static unsafe CefUrlRequestClient Create(IntPtr instance)
		{
			return new CefUrlRequestClient((cef_urlrequest_client_t*)instance);
		}

		public CefUrlRequestClient(cef_urlrequest_client_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Notifies the client that the request has completed. Use the
		/// cef_urlrequest_t::GetRequestStatus function to determine if the request was
		/// successful or not.
		/// </summary>
		public unsafe virtual void OnRequestComplete(CefUrlRequest request)
		{
			NativeInstance->OnRequestComplete((request != null) ? request.GetNativeInstance() : null);
			GC.KeepAlive(this);
		}

		/// <summary>
		/// Notifies the client of upload progress. |current| denotes the number of
		/// bytes sent so far and |total| is the total size of uploading data (or -1 if
		/// chunked upload is enabled). This function will only be called if the
		/// UR_FLAG_REPORT_UPLOAD_PROGRESS flag is set on the request.
		/// </summary>
		public unsafe virtual void OnUploadProgress(CefUrlRequest request, long current, long total)
		{
			NativeInstance->OnUploadProgress((request != null) ? request.GetNativeInstance() : null, current, total);
			GC.KeepAlive(this);
		}

		/// <summary>
		/// Notifies the client of download progress. |current| denotes the number of
		/// bytes received up to the call and |total| is the expected total size of the
		/// response (or -1 if not determined).
		/// </summary>
		public unsafe virtual void OnDownloadProgress(CefUrlRequest request, long current, long total)
		{
			NativeInstance->OnDownloadProgress((request != null) ? request.GetNativeInstance() : null, current, total);
			GC.KeepAlive(this);
		}

		/// <summary>
		/// Called when some part of the response is read. |data| contains the current
		/// bytes received since the last call. This function will not be called if the
		/// UR_FLAG_NO_DOWNLOAD_DATA flag is set on the request.
		/// </summary>
		public unsafe virtual void OnDownloadData(CefUrlRequest request, IntPtr data, long dataLength)
		{
			NativeInstance->OnDownloadData((request != null) ? request.GetNativeInstance() : null, (void*)data, new UIntPtr((ulong)dataLength));
			GC.KeepAlive(this);
		}

		/// <summary>
		/// Called on the IO thread when the browser needs credentials from the user.
		/// |isProxy| indicates whether the host is a proxy server. |host| contains the
		/// hostname and |port| contains the port number. Return true (1) to continue
		/// the request and call cef_auth_callback_t::cont() when the authentication
		/// information is available. If the request has an associated browser/frame
		/// then returning false (0) will result in a call to GetAuthCredentials on the
		/// cef_request_handler_t associated with that browser, if any. Otherwise,
		/// returning false (0) will cancel the request immediately. This function will
		/// only be called for requests initiated from the browser process.
		/// </summary>
		public unsafe virtual bool GetAuthCredentials(bool isProxy, string host, int port, string realm, string scheme, CefAuthCallback callback)
		{
			fixed (char* s1 = host)
			fixed (char* s3 = realm)
			fixed (char* s4 = scheme)
			{
				var cstr1 = new cef_string_t { Str = s1, Length = host != null ? host.Length : 0 };
				var cstr3 = new cef_string_t { Str = s3, Length = realm != null ? realm.Length : 0 };
				var cstr4 = new cef_string_t { Str = s4, Length = scheme != null ? scheme.Length : 0 };
				return SafeCall(NativeInstance->GetAuthCredentials(isProxy ? 1 : 0, &cstr1, port, &cstr3, &cstr4, (callback != null) ? callback.GetNativeInstance() : null) != 0);
			}
		}
	}
}
