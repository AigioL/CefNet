// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_pdf_print_callback_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Callback structure for cef_browser_host_t::PrintToPDF. The functions of this
	/// structure will be called on the browser process UI thread.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefPdfPrintCallback : CefBaseRefCounted<cef_pdf_print_callback_t>
	{
		internal static unsafe CefPdfPrintCallback Create(IntPtr instance)
		{
			return new CefPdfPrintCallback((cef_pdf_print_callback_t*)instance);
		}

		public CefPdfPrintCallback(cef_pdf_print_callback_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Method that will be executed when the PDF printing has completed. |path| is
		/// the output path. |ok| will be true (1) if the printing completed
		/// successfully or false (0) otherwise.
		/// </summary>
		public unsafe virtual void OnPdfPrintFinished(string path, bool ok)
		{
			fixed (char* s0 = path)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = path != null ? path.Length : 0 };
				NativeInstance->OnPdfPrintFinished(&cstr0, ok ? 1 : 0);
			}
			GC.KeepAlive(this);
		}
	}
}
