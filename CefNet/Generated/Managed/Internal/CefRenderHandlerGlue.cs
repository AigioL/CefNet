// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_render_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet.Internal
{
	sealed partial class CefRenderHandlerGlue: CefRenderHandler, ICefRenderHandlerPrivate
	{
		private WebViewGlue _implementation;

		public CefRenderHandlerGlue(WebViewGlue impl)
		{
			_implementation = impl;
		}

		public override CefAccessibilityHandler GetAccessibilityHandler()
		{
			return _implementation.GetAccessibilityHandler();
		}

		bool ICefRenderHandlerPrivate.AvoidGetRootScreenRect()
		{
			return _implementation.AvoidGetRootScreenRect();
		}

		public override bool GetRootScreenRect(CefBrowser browser, ref CefRect rect)
		{
			return _implementation.GetRootScreenRect(browser, ref rect);
		}

		bool ICefRenderHandlerPrivate.AvoidGetViewRect()
		{
			return _implementation.AvoidGetViewRect();
		}

		public override void GetViewRect(CefBrowser browser, ref CefRect rect)
		{
			_implementation.GetViewRect(browser, ref rect);
		}

		bool ICefRenderHandlerPrivate.AvoidGetScreenPoint()
		{
			return _implementation.AvoidGetScreenPoint();
		}

		public override bool GetScreenPoint(CefBrowser browser, int viewX, int viewY, ref int screenX, ref int screenY)
		{
			return _implementation.GetScreenPoint(browser, viewX, viewY, ref screenX, ref screenY);
		}

		bool ICefRenderHandlerPrivate.AvoidGetScreenInfo()
		{
			return _implementation.AvoidGetScreenInfo();
		}

		public override bool GetScreenInfo(CefBrowser browser, ref CefScreenInfo screenInfo)
		{
			return _implementation.GetScreenInfo(browser, ref screenInfo);
		}

		bool ICefRenderHandlerPrivate.AvoidOnPopupShow()
		{
			return _implementation.AvoidOnPopupShow();
		}

		public override void OnPopupShow(CefBrowser browser, bool show)
		{
			_implementation.OnPopupShow(browser, show);
		}

		bool ICefRenderHandlerPrivate.AvoidOnPopupSize()
		{
			return _implementation.AvoidOnPopupSize();
		}

		public override void OnPopupSize(CefBrowser browser, CefRect rect)
		{
			_implementation.OnPopupSize(browser, rect);
		}

		bool ICefRenderHandlerPrivate.AvoidOnPaint()
		{
			return _implementation.AvoidOnPaint();
		}

		public override void OnPaint(CefBrowser browser, CefPaintElementType type, CefRect[] dirtyRects, IntPtr buffer, int width, int height)
		{
			_implementation.OnPaint(browser, type, dirtyRects, buffer, width, height);
		}

		bool ICefRenderHandlerPrivate.AvoidOnAcceleratedPaint()
		{
			return _implementation.AvoidOnAcceleratedPaint();
		}

		public override void OnAcceleratedPaint(CefBrowser browser, CefPaintElementType type, CefRect[] dirtyRects, IntPtr sharedHandle)
		{
			_implementation.OnAcceleratedPaint(browser, type, dirtyRects, sharedHandle);
		}

		bool ICefRenderHandlerPrivate.AvoidOnCursorChange()
		{
			return _implementation.AvoidOnCursorChange();
		}

		public override void OnCursorChange(CefBrowser browser, IntPtr cursor, CefCursorType type, CefCursorInfo customCursorInfo)
		{
			_implementation.OnCursorChange(browser, cursor, type, customCursorInfo);
		}

		bool ICefRenderHandlerPrivate.AvoidStartDragging()
		{
			return _implementation.AvoidStartDragging();
		}

		public override bool StartDragging(CefBrowser browser, CefDragData dragData, CefDragOperationsMask allowedOps, int x, int y)
		{
			return _implementation.StartDragging(browser, dragData, allowedOps, x, y);
		}

		bool ICefRenderHandlerPrivate.AvoidUpdateDragCursor()
		{
			return _implementation.AvoidUpdateDragCursor();
		}

		public override void UpdateDragCursor(CefBrowser browser, CefDragOperationsMask operation)
		{
			_implementation.UpdateDragCursor(browser, operation);
		}

		bool ICefRenderHandlerPrivate.AvoidOnScrollOffsetChanged()
		{
			return _implementation.AvoidOnScrollOffsetChanged();
		}

		public override void OnScrollOffsetChanged(CefBrowser browser, double x, double y)
		{
			_implementation.OnScrollOffsetChanged(browser, x, y);
		}

		bool ICefRenderHandlerPrivate.AvoidOnImeCompositionRangeChanged()
		{
			return _implementation.AvoidOnImeCompositionRangeChanged();
		}

		public override void OnImeCompositionRangeChanged(CefBrowser browser, CefRange selectedRange, CefRect[] characterBounds)
		{
			_implementation.OnImeCompositionRangeChanged(browser, selectedRange, characterBounds);
		}

		bool ICefRenderHandlerPrivate.AvoidOnTextSelectionChanged()
		{
			return _implementation.AvoidOnTextSelectionChanged();
		}

		public override void OnTextSelectionChanged(CefBrowser browser, string selectedText, CefRange selectedRange)
		{
			_implementation.OnTextSelectionChanged(browser, selectedText, selectedRange);
		}

		bool ICefRenderHandlerPrivate.AvoidOnVirtualKeyboardRequested()
		{
			return _implementation.AvoidOnVirtualKeyboardRequested();
		}

		public override void OnVirtualKeyboardRequested(CefBrowser browser, CefTextInputMode inputMode)
		{
			_implementation.OnVirtualKeyboardRequested(browser, inputMode);
		}

	}
}
